a=1,b=1
a=1; b=1
knitr::opts_chunk$set(echo = TRUE)
rats<- read.table("http://people.bath.ac.uk/kai21/ASI/rats_data.txt")
head(rats)
split_rats <- split(rats, rats$status)
tumour=as.data.frame(split_rats[[2]])
dead=as.data.frame(split_rats[[1]])
# function to compute log posterior
log.post <- function(beta0, beta1, log_sigma,log_sigma_b,b_tumour, b_dead,  tumour, dead) {
x_tumour=tumour$rx
y_tumour=tumour$time
litter_tumour=tumour$litter
n_tumour=length(y_tumour)
x_dead=dead$rx
y_dead=dead$time
n_dead=length(y_dead)
litter_dead=dead$litter
log_pi0_beta0=log(1)
log_pi0_beta1=  log(1)
log_pi0_log_sigma=log(1)
log_pi0_log_sigma_b= log(5*exp(-5*exp(log_sigma_b)))
log_pi0_b_tumour=log(dnorm(b_tumour, mean=0, sd=exp(log_sigma_b)))
log_pio_b_dead=log(dnorm(b_dead, mean=0, sd=exp(log_sigma_b)))
# we add the priors since we assume they are independent
log_pi0<- log_pi0_beta0+log_pi0_beta1+log_pi0_log_sigma+log_pi0_log_sigma_b+sum(log_pio_b_dead)+sum(log_pi0_b_tumour)
# Now the log likelihood
log.lik<-sum(log (dweibull(y_tumour, 1/exp(log_sigma), exp(beta0+beta1*x_tumour+b_tumour))))+sum(log (pweibull(y_dead, 1/exp(log_sigma), exp(beta0+beta1*x_dead+b_dead))))
# now the log posterior = log likelihood +log prior
return(log.lik+log_pi0)
}
nsteps=100000 ; burn.in=10000
MH<-function(beta0_0,beta1_0, log_sigma_0, log_sigma_b0, b_tumour0, b_dead0, sigma_beta0, sigma_beta1, sigma_log_sigma, sigma_log_sigma_b,   sigma_b, nsteps){
# set up locations to store values at each step
accept <- rep(0,3)
beta0 <- rep(0,nsteps) ;  beta1=rep(0,nsteps);  log_sigma=rep(0,nsteps);  log_sigma_b=rep(0,nsteps)
b_tumour=matrix(0,nsteps,length(tumour$rx)) ;  b_dead=matrix(0,nsteps,length(dead$rx))
#Set intial values
beta0[1] <- beta0_0 ;  beta1[1]=beta1_0;  log_sigma[1]=log_sigma_0;  log_sigma_b[1]=log_sigma_b0;  b_tumour[1,]=b_tumour0;  b_dead[1,]=b_dead0
lp0 <- log.post(beta0_0,beta1_0, log_sigma_0, log_sigma_b0,b_tumour0, b_dead0,tumour, dead) # calculate log posterior for these intial values
for( i in 2:nsteps){ #MH loop
# set current values
current_beta0=beta0[i-1] ;current_beta1=beta1[i-1];current_log_sigma=log_sigma[i-1];  current_log_sigma_b=log_sigma_b[i-1];current_b_tumour=b_tumour[i-1,]; current_b_dead=b_dead[i-1,]
#update sigma_b
proposed_log_sigma_b=current_log_sigma_b+rnorm(1,0,sigma_log_sigma_b)
lp1 <- log.post(current_beta0,current_beta1, current_log_sigma, proposed_log_sigma_b,current_b_tumour, current_b_dead,tumour, dead) # find log posterior of new values
acc <- exp(min(0,lp1-lp0))
if (runif(1)>=acc| !is.finite(acc)){#reject
b_tumour[i,] <- current_b_tumour ;  b_dead[i,]=current_b_dead;  beta0[i] <- current_beta0;  beta1[i]=current_beta1;  log_sigma[i]=current_log_sigma;  log_sigma_b[i]=current_log_sigma_b
lp1<- lp0 ## Return to the 'old' log posterior
}else {#accept
accept[1]=accept[1]+1 # keep track of number of acceptances
log_sigma_b[i]=proposed_log_sigma_b #store found values
lp0 <- lp1 ## uldate old log posterior to the new one
proposed_b_tumour=current_b_tumour + rnorm( length(tumour$rx), mean=0, sd=sigma_b)#update b
proposed_b_dead=current_b_dead+ rnorm( length(dead$rx), mean=0, sd=sigma_b)#update b
lp1 <- log.post(current_beta0,current_beta1, current_log_sigma, proposed_log_sigma_b,proposed_b_tumour, proposed_b_dead,tumour, dead) # update log posterior
acc <- exp(min(0,lp1-lp0))
if (runif(1)>=acc | !is.finite(acc)){#reject
b_tumour[i,] <- current_b_tumour ;  b_dead[i,]=current_b_dead;  beta0[i] <- current_beta0;  beta1[i]=current_beta1;  log_sigma[i]=current_log_sigma     #store values
lp1<- lp0 ## Return to previous log posterior
}else {#accept
accept[2]=accept[2]+1 # keep track to calculate acceptance rates
b_tumour[i,] <- proposed_b_tumour;  b_dead[i,]=proposed_b_dead;  #store values
lp0 <- lp1 ## update log posterior
#update remaining paramaters
proposed_beta0=current_beta0+rnorm(1,0,sigma_beta0)
proposed_beta1=current_beta1+rnorm(1,0,sigma_beta1)
proposed_log_sigma=current_log_sigma+rnorm(1,0,sigma_log_sigma)
lp1=log.post(proposed_beta0,proposed_beta1, proposed_log_sigma, proposed_log_sigma_b,proposed_b_tumour, proposed_b_dead,tumour, dead) # calculate new log posterior
acc <- exp(min(0,lp1-lp0))
if (runif(1)>=acc| !is.finite(acc)){#reject
beta0[i] <- current_beta0 ;  beta1[i]=current_beta1;  log_sigma[i]=current_log_sigma #store values
lp1<- lp0 ## Return to previous log posterior
}else {#accept
accept[3]=accept[3]+1 # keep track to calculate acceptance rates
beta0[i] <- proposed_beta0;  beta1[i]=proposed_beta1;  log_sigma[i]=proposed_log_sigma#store values
lp0=lp1 # update log posterior
}}}}
list(beta0=beta0, beta1=beta1, log_sigma_b=log_sigma_b, log_sigma=log_sigma,ar_outer=accept[1]/nsteps, ar_middle=accept[2]/accept[1], ar_inner=accept[3]/accept[2])
}
mh=MH(4.2 , 0.14, -1.35,-1.5, rep(0, length(tumour$rx)),rep(0, length(dead$rx)),0.1,0.1,0.1,0.2,0.001, nsteps = nsteps)
mh$ar_outer;mh$ar_middle;mh$ar_inner
# note we do discard burn-in iterations
n.eff <- c(0,0,0,0)
###
autocor <- acf(mh$beta0[-(burn.in)],plot=FALSE)
t.eff <- 2*sum(autocor[[1]]) - 1
n.eff[1] <- nsteps/t.eff
###
autocor <- acf(mh$beta1[-(burn.in)],plot=FALSE)
t.eff <- 2*sum(autocor[[1]]) - 1
n.eff[2] <- nsteps/t.eff
###
autocor <- acf(mh$log_sigma[-(burn.in)],plot=FALSE)
t.eff <- 2*sum(autocor[[1]]) - 1
n.eff[3] <- nsteps/t.eff
###
autocor <- acf(mh$log_sigma_b[-(burn.in)],plot=FALSE)
t.eff <- 2*sum(autocor[[1]]) - 1
n.eff[4] <- nsteps/t.eff
# t.eff is the integrated autocrrelation length
n.eff
ks.test(mh$beta0[-1000:-500], mh$beta0[-500])
a=ks.test(mh$beta0[-1000:-500], mh$beta0[-500])
a$p.value
k1=ks.test(mh$beta0[-1000:-500], mh$beta0[-500]);
k2=ks.test(mh$beta1[-1000:-500], mh$beta1[-500]);
k3=ks.test(mh$log_sigma_b[-1000:-500], mh$log_sigma_b[-500]);
k4=ks.test(mh$log_sigma[-1000:-500], mh$log_sigma[-500]);
c(k1$p.value,k2$p.value,k3$p.value,k4$p.value)
knitr::opts_chunk$set(echo = TRUE)
nsteps=100000; burn.in=10000
MH<-function(log_alpha0, delta0, log_sigma0,mu_gamma0,log_sigma_gamma0, gamma_broke0, gamma_runoff0, range_log_alpha, range_delta, range_log_sigma,range_mu_gamma,range_log_sigma_gamma, range_gamma, nsteps=nsteps){
accept <- rep(0,3)# will keep track of acceptance rates for the inner middle and outer metropolis hastings chain
log_alpha <- rep(0,nsteps); delta=rep(0,nsteps);log_sigma=rep(0,nsteps); mu_gamma=rep(0,nsteps);  log_sigma_gamma=rep(0,nsteps)#Set up holders for values
gamma_broke=matrix(0, nsteps, length(broke$N)); gamma_runoff=matrix(0, nsteps, length(runoff$N))#Set up holders for values
log_alpha[1] <- log_alpha0;  delta[1]=delta0;  log_sigma[1]=log_sigma0;  mu_gamma[1]=mu_gamma0;  log_sigma_gamma[1]=log_sigma_gamma0 #Set initial values
gamma_broke[1,]=gamma_broke0;  gamma_runoff[1,]=gamma_runoff0#Set initial values
lp0 <- log.post(log_alpha0, delta0, log_sigma0,mu_gamma0,log_sigma_gamma0, gamma_broke0, gamma_runoff0, broke, runoff) # log posterior calculated from the initial values
for (i in 2:nsteps){
#Set current values
current_log_alpha=log_alpha[i-1]; current_delta=delta[i-1]; current_log_sigma=log_sigma[i-1]; current_mu_gamma=mu_gamma[i-1]; current_log_sigma_gamma=log_sigma_gamma[i-1] # extract current values
current_gamma_broke=gamma_broke[i-1,];current_gamma_runoff=gamma_runoff[i-1,] #extract current values
proposed_mu_gamma=current_mu_gamma+rnorm(1,0, range_mu_gamma) # new proposed values
proposed_log_sigma_gamma=current_log_sigma_gamma+rnorm(1,0, range_log_sigma_gamma) # new proposed values
lp1 <- log.post(current_log_alpha, current_delta, current_log_sigma,proposed_mu_gamma,proposed_log_sigma_gamma, current_gamma_broke, current_gamma_runoff, broke, runoff) # calculate new log posterior
acc <- exp(min(0,lp1-lp0))
if (runif(1) >= acc | !is.finite(acc)){# reject
log_alpha[i] <- current_log_alpha; delta[i]=current_delta; log_sigma[i]=current_log_sigma;    mu_gamma[i]=current_mu_gamma; log_sigma_gamma[i]=current_log_sigma_gamma;      gamma_broke[i,]=current_gamma_broke; gamma_runoff[i,]=current_gamma_runoff # keep track of variables
lp1=lp0 # keep log posterior values up to date
}else{#accept
accept[1]=accept[1]+1 # keep track to calculate acceptance rates
mu_gamma[i]=proposed_mu_gamma ; log_sigma_gamma[i]=proposed_log_sigma_gamma # update new values
lp0=lp1# keep log posterior values up to date
proposed_gamma_broke= current_gamma_broke + runif(length(broke$N), -range_gamma, range_gamma)# propose new gamma
proposed_gamma_runoff= current_gamma_runoff+ runif(length(runoff$N), -range_gamma, range_gamma) # propose new gamma
check1=isTRUE(all.equal(abs(broke$s-proposed_gamma_broke), broke$s-proposed_gamma_broke)) #check gamma is less than the s values if not reject
check2=isTRUE(all.equal(abs(runoff$s-proposed_gamma_runoff), runoff$s-proposed_gamma_runoff))#check gamma is less than the s values if not reject
if(!(check1 & check2) ){ # reject
log_alpha[i] <- current_log_alpha
delta[i]=current_delta
log_sigma[i]=current_log_sigma
gamma_broke[i,]=current_gamma_broke
gamma_runoff[i,]=current_gamma_runoff
lp1=lp0# keep log posterior values up to date
} else{# continue with MH
lp1 <- log.post(current_log_alpha, current_delta, current_log_sigma,proposed_mu_gamma,proposed_log_sigma_gamma, proposed_gamma_broke, proposed_gamma_runoff, broke, runoff)} # calculate new log posterior
acc <- exp(min(0,lp1-lp0))
if (runif(1) >= acc| !is.finite(acc)){# reject
log_alpha[i] <- current_log_alpha;delta[i]=current_delta; log_sigma[i]=current_log_sigma; gamma_broke[i,]=current_gamma_broke;gamma_runoff[i,]=current_gamma_runoff # keep track of variables
lp1=lp0# keep log posterior values up to date
}else{ #accept
accept[2]=accept[2]+1 # keep track to calculate acceptance rates
gamma_broke[i,]=proposed_gamma_broke; gamma_runoff[i,]=proposed_gamma_runoff # update new values
lp0=lp1# keep log posterior values up to date
proposed_log_alpha=current_log_alpha+rnorm(1, 0, range_log_alpha) #new propsed values
proposed_delta=current_delta+rnorm(1, 0, range_delta) #new propsed values
proposed_log_sigma=current_log_sigma+rnorm(1, 0, range_log_sigma) #new propsed values
lp1 <- log.post(proposed_log_alpha, proposed_delta, proposed_log_sigma,proposed_mu_gamma,proposed_log_sigma_gamma, proposed_gamma_broke, proposed_gamma_runoff, broke, runoff) # calculate new log posterior
acc <- exp(min(0,lp1-lp0))
if (runif(1) >= acc| !is.finite(acc)){# reject
log_alpha[i] <- current_log_alpha; delta[i]=current_delta;log_sigma[i]=current_log_sigma # keep track of variables
lp1=lp0# keep log posterior values up to date
}else{#accept
accept[3]=accept[3]+1 # keep track to calculate acceptance rates
log_alpha[i] <- proposed_log_alpha
delta[i]=proposed_delta ; log_sigma[i]=proposed_log_sigma # keep track of variables
lp0=lp1# keep log posterior values up to date
} } }  }
list(log_alpha=log_alpha, delta=delta, log_sigma=log_sigma,mu_gamma=mu_gamma,log_sigma_gamma=log_sigma_gamma, ar_inner=accept[3]/accept[2], ar_middle=accept[2]/accept[1], ar_outer=accept[1]/nsteps)
}
mh=MH(0,1,1,4,-3,rep(50, length(broke$N)),rep(50, length(runoff$N)),0.1,0.3,0.3,0.05,0.05,0.4,nsteps = nsteps)
nsteps=100000; burn.in=10000
MH<-function(log_alpha0, delta0, log_sigma0,mu_gamma0,log_sigma_gamma0, gamma_broke0, gamma_runoff0, range_log_alpha, range_delta, range_log_sigma,range_mu_gamma,range_log_sigma_gamma, range_gamma, nsteps=nsteps){
accept <- rep(0,3)# will keep track of acceptance rates for the inner middle and outer metropolis hastings chain
log_alpha <- rep(0,nsteps); delta=rep(0,nsteps);log_sigma=rep(0,nsteps); mu_gamma=rep(0,nsteps);  log_sigma_gamma=rep(0,nsteps)#Set up holders for values
gamma_broke=matrix(0, nsteps, length(broke$N)); gamma_runoff=matrix(0, nsteps, length(runoff$N))#Set up holders for values
log_alpha[1] <- log_alpha0;  delta[1]=delta0;  log_sigma[1]=log_sigma0;  mu_gamma[1]=mu_gamma0;  log_sigma_gamma[1]=log_sigma_gamma0 #Set initial values
gamma_broke[1,]=gamma_broke0;  gamma_runoff[1,]=gamma_runoff0#Set initial values
lp0 <- log.post(log_alpha0, delta0, log_sigma0,mu_gamma0,log_sigma_gamma0, gamma_broke0, gamma_runoff0, broke, runoff) # log posterior calculated from the initial values
for (i in 2:nsteps){
#Set current values
current_log_alpha=log_alpha[i-1]; current_delta=delta[i-1]; current_log_sigma=log_sigma[i-1]; current_mu_gamma=mu_gamma[i-1]; current_log_sigma_gamma=log_sigma_gamma[i-1] # extract current values
current_gamma_broke=gamma_broke[i-1,];current_gamma_runoff=gamma_runoff[i-1,] #extract current values
proposed_mu_gamma=current_mu_gamma+rnorm(1,0, range_mu_gamma) # new proposed values
proposed_log_sigma_gamma=current_log_sigma_gamma+rnorm(1,0, range_log_sigma_gamma) # new proposed values
lp1 <- log.post(current_log_alpha, current_delta, current_log_sigma,proposed_mu_gamma,proposed_log_sigma_gamma, current_gamma_broke, current_gamma_runoff, broke, runoff) # calculate new log posterior
acc <- exp(min(0,lp1-lp0))
if (runif(1) >= acc | !is.finite(acc)){# reject
log_alpha[i] <- current_log_alpha; delta[i]=current_delta; log_sigma[i]=current_log_sigma;    mu_gamma[i]=current_mu_gamma; log_sigma_gamma[i]=current_log_sigma_gamma;      gamma_broke[i,]=current_gamma_broke; gamma_runoff[i,]=current_gamma_runoff # keep track of variables
lp1=lp0 # keep log posterior values up to date
}else{#accept
accept[1]=accept[1]+1 # keep track to calculate acceptance rates
mu_gamma[i]=proposed_mu_gamma ; log_sigma_gamma[i]=proposed_log_sigma_gamma # update new values
lp0=lp1# keep log posterior values up to date
proposed_gamma_broke= current_gamma_broke + runif(length(broke$N), -range_gamma, range_gamma)# propose new gamma
proposed_gamma_runoff= current_gamma_runoff+ runif(length(runoff$N), -range_gamma, range_gamma) # propose new gamma
check1=isTRUE(all.equal(abs(broke$s-proposed_gamma_broke), broke$s-proposed_gamma_broke)) #check gamma is less than the s values if not reject
check2=isTRUE(all.equal(abs(runoff$s-proposed_gamma_runoff), runoff$s-proposed_gamma_runoff))#check gamma is less than the s values if not reject
if(!(check1 & check2) ){ # reject
log_alpha[i] <- current_log_alpha;delta[i]=current_delta;log_sigma[i]=current_log_sigma; gamma_broke[i,]=current_gamma_broke; gamma_runoff[i,]=current_gamma_runoff
lp1=lp0# keep log posterior values up to date
} else{# continue with MH
lp1 <- log.post(current_log_alpha, current_delta, current_log_sigma,proposed_mu_gamma,proposed_log_sigma_gamma, proposed_gamma_broke, proposed_gamma_runoff, broke, runoff)} # calculate new log posterior
acc <- exp(min(0,lp1-lp0))
if (runif(1) >= acc| !is.finite(acc)){# reject
log_alpha[i] <- current_log_alpha;delta[i]=current_delta; log_sigma[i]=current_log_sigma; gamma_broke[i,]=current_gamma_broke;gamma_runoff[i,]=current_gamma_runoff # keep track of variables
lp1=lp0# keep log posterior values up to date
}else{ #accept
accept[2]=accept[2]+1 # keep track to calculate acceptance rates
gamma_broke[i,]=proposed_gamma_broke; gamma_runoff[i,]=proposed_gamma_runoff # update new values
lp0=lp1# keep log posterior values up to date
proposed_log_alpha=current_log_alpha+rnorm(1, 0, range_log_alpha) #new propsed values
proposed_delta=current_delta+rnorm(1, 0, range_delta) #new propsed values
proposed_log_sigma=current_log_sigma+rnorm(1, 0, range_log_sigma) #new propsed values
lp1 <- log.post(proposed_log_alpha, proposed_delta, proposed_log_sigma,proposed_mu_gamma,proposed_log_sigma_gamma, proposed_gamma_broke, proposed_gamma_runoff, broke, runoff) # calculate new log posterior
acc <- exp(min(0,lp1-lp0))
if (runif(1) >= acc| !is.finite(acc)){# reject
log_alpha[i] <- current_log_alpha; delta[i]=current_delta;log_sigma[i]=current_log_sigma # keep track of variables
lp1=lp0# keep log posterior values up to date
}else{#accept
accept[3]=accept[3]+1 # keep track to calculate acceptance rates
log_alpha[i] <- proposed_log_alpha
delta[i]=proposed_delta ; log_sigma[i]=proposed_log_sigma # keep track of variables
lp0=lp1# keep log posterior values up to date
} } }  }
list(log_alpha=log_alpha, delta=delta, log_sigma=log_sigma,mu_gamma=mu_gamma,log_sigma_gamma=log_sigma_gamma, ar_inner=accept[3]/accept[2], ar_middle=accept[2]/accept[1], ar_outer=accept[1]/nsteps)
}
mh=MH(0,1,1,4,-3,rep(50, length(broke$N)),rep(50, length(runoff$N)),0.1,0.3,0.3,0.05,0.05,0.4,nsteps = nsteps)
split_fatigue <- split(fatigue, fatigue$ro)
fatigue<- read.table("http://people.bath.ac.uk/kai21/ASI/fatigue.txt")
split_fatigue <- split(fatigue, fatigue$ro)
broke=as.data.frame(split_fatigue[[1]])
runoff=as.data.frame(split_fatigue[[2]])
# function to compute log posterior
log.post <- function(log_alpha, delta, log_sigma,mu_gamma,log_sigma_gamma,gamma_broke, gamma_runoff, broke, runoff) {
log_pi0_log_alpha=log(1);log_pi0_delta=  log(1);log_pi0_log_sigma=log(1);log_pi0_mu_gamma= log(1) #log prior
log_pi0_log_sigma_gamma=log(5*exp(-5*exp(log_sigma_gamma)))
log_pi0_gamma_broke=log(dweibull(gamma_broke, 1/exp(log_sigma_gamma), exp(mu_gamma)))#log prior
log_pi0_gamma_runoff=log(dweibull(gamma_runoff, 1/exp(log_sigma_gamma), exp(mu_gamma)))#log prior
log_pi0<- log_pi0_log_alpha+log_pi0_delta+log_pi0_log_sigma+log_pi0_mu_gamma+log_pi0_log_sigma_gamma +sum(log_pi0_gamma_runoff)+sum(log_pi0_gamma_broke)# we add the priors since we assume they are independent
log.lik=sum(log(pweibull(broke$N, 1/exp(log_sigma), exp(log_alpha)*(broke$s-gamma_broke)^delta)))+sum(log(dweibull(runoff$N, 1/exp(log_sigma), exp(log_alpha)*(runoff$s-gamma_runoff)^delta)))# Now the log likelihood
return(log.lik+log_pi0) # now the log posterior = log likelihood +log prior
}
nsteps=100000; burn.in=10000
MH<-function(log_alpha0, delta0, log_sigma0,mu_gamma0,log_sigma_gamma0, gamma_broke0, gamma_runoff0, range_log_alpha, range_delta, range_log_sigma,range_mu_gamma,range_log_sigma_gamma, range_gamma, nsteps=nsteps){
accept <- rep(0,3)# will keep track of acceptance rates for the inner middle and outer metropolis hastings chain
log_alpha <- rep(0,nsteps); delta=rep(0,nsteps);log_sigma=rep(0,nsteps); mu_gamma=rep(0,nsteps);  log_sigma_gamma=rep(0,nsteps)#Set up holders for values
gamma_broke=matrix(0, nsteps, length(broke$N)); gamma_runoff=matrix(0, nsteps, length(runoff$N))#Set up holders for values
log_alpha[1] <- log_alpha0;  delta[1]=delta0;  log_sigma[1]=log_sigma0;  mu_gamma[1]=mu_gamma0;  log_sigma_gamma[1]=log_sigma_gamma0 #Set initial values
gamma_broke[1,]=gamma_broke0;  gamma_runoff[1,]=gamma_runoff0#Set initial values
lp0 <- log.post(log_alpha0, delta0, log_sigma0,mu_gamma0,log_sigma_gamma0, gamma_broke0, gamma_runoff0, broke, runoff) # log posterior calculated from the initial values
for (i in 2:nsteps){
#Set current values
current_log_alpha=log_alpha[i-1]; current_delta=delta[i-1]; current_log_sigma=log_sigma[i-1]; current_mu_gamma=mu_gamma[i-1]; current_log_sigma_gamma=log_sigma_gamma[i-1] # extract current values
current_gamma_broke=gamma_broke[i-1,];current_gamma_runoff=gamma_runoff[i-1,] #extract current values
proposed_mu_gamma=current_mu_gamma+rnorm(1,0, range_mu_gamma) # new proposed values
proposed_log_sigma_gamma=current_log_sigma_gamma+rnorm(1,0, range_log_sigma_gamma) # new proposed values
lp1 <- log.post(current_log_alpha, current_delta, current_log_sigma,proposed_mu_gamma,proposed_log_sigma_gamma, current_gamma_broke, current_gamma_runoff, broke, runoff) # calculate new log posterior
acc <- exp(min(0,lp1-lp0))
if (runif(1) >= acc | !is.finite(acc)){# reject
log_alpha[i] <- current_log_alpha; delta[i]=current_delta; log_sigma[i]=current_log_sigma;    mu_gamma[i]=current_mu_gamma; log_sigma_gamma[i]=current_log_sigma_gamma;      gamma_broke[i,]=current_gamma_broke; gamma_runoff[i,]=current_gamma_runoff # keep track of variables
lp1=lp0 # keep log posterior values up to date
}else{#accept
accept[1]=accept[1]+1 # keep track to calculate acceptance rates
mu_gamma[i]=proposed_mu_gamma ; log_sigma_gamma[i]=proposed_log_sigma_gamma # update new values
lp0=lp1# keep log posterior values up to date
proposed_gamma_broke= current_gamma_broke + runif(length(broke$N), -range_gamma, range_gamma)# propose new gamma
proposed_gamma_runoff= current_gamma_runoff+ runif(length(runoff$N), -range_gamma, range_gamma) # propose new gamma
check1=isTRUE(all.equal(abs(broke$s-proposed_gamma_broke), broke$s-proposed_gamma_broke)) #check gamma is less than the s values if not reject
check2=isTRUE(all.equal(abs(runoff$s-proposed_gamma_runoff), runoff$s-proposed_gamma_runoff))#check gamma is less than the s values if not reject
if(!(check1 & check2) ){ # reject
log_alpha[i] <- current_log_alpha;delta[i]=current_delta;log_sigma[i]=current_log_sigma; gamma_broke[i,]=current_gamma_broke; gamma_runoff[i,]=current_gamma_runoff
lp1=lp0# keep log posterior values up to date
} else{# continue with MH
lp1 <- log.post(current_log_alpha, current_delta, current_log_sigma,proposed_mu_gamma,proposed_log_sigma_gamma, proposed_gamma_broke, proposed_gamma_runoff, broke, runoff)} # calculate new log posterior
acc <- exp(min(0,lp1-lp0))
if (runif(1) >= acc| !is.finite(acc)){# reject
log_alpha[i] <- current_log_alpha;delta[i]=current_delta; log_sigma[i]=current_log_sigma; gamma_broke[i,]=current_gamma_broke;gamma_runoff[i,]=current_gamma_runoff # keep track of variables
lp1=lp0# keep log posterior values up to date
}else{ #accept
accept[2]=accept[2]+1 # keep track to calculate acceptance rates
gamma_broke[i,]=proposed_gamma_broke; gamma_runoff[i,]=proposed_gamma_runoff # update new values
lp0=lp1# keep log posterior values up to date
proposed_log_alpha=current_log_alpha+rnorm(1, 0, range_log_alpha) #new propsed values
proposed_delta=current_delta+rnorm(1, 0, range_delta) #new propsed values
proposed_log_sigma=current_log_sigma+rnorm(1, 0, range_log_sigma) #new propsed values
lp1 <- log.post(proposed_log_alpha, proposed_delta, proposed_log_sigma,proposed_mu_gamma,proposed_log_sigma_gamma, proposed_gamma_broke, proposed_gamma_runoff, broke, runoff) # calculate new log posterior
acc <- exp(min(0,lp1-lp0))
if (runif(1) >= acc| !is.finite(acc)){# reject
log_alpha[i] <- current_log_alpha; delta[i]=current_delta;log_sigma[i]=current_log_sigma # keep track of variables
lp1=lp0# keep log posterior values up to date
}else{#accept
accept[3]=accept[3]+1 # keep track to calculate acceptance rates
log_alpha[i] <- proposed_log_alpha
delta[i]=proposed_delta ; log_sigma[i]=proposed_log_sigma # keep track of variables
lp0=lp1# keep log posterior values up to date
} } }  }
list(log_alpha=log_alpha, delta=delta, log_sigma=log_sigma,mu_gamma=mu_gamma,log_sigma_gamma=log_sigma_gamma, ar_inner=accept[3]/accept[2], ar_middle=accept[2]/accept[1], ar_outer=accept[1]/nsteps)
}
mh=MH(0,1,1,4,-3,rep(50, length(broke$N)),rep(50, length(runoff$N)),0.1,0.3,0.3,0.05,0.05,0.4,nsteps = nsteps)
mh$ar_outer;  mh$ar_middle;  mh$ar_inner
show.plot<- (burn.in):nsteps
par(mfrow=c(5,1), mar=c(2,2,1,1))
plot(mh$log_alpha[show.plot],type="l",ylab=expression(log_alpha))
plot(mh$delta[show.plot],type="l",ylab=expression(delta))
plot(mh$log_sigma[show.plot],type="l",ylab=expression(log(sigma)))
plot(mh$mu_gamma[show.plot],type="l",ylab=expression(mu_gamma))
plot(mh$log_sigma_gamma[show.plot],type="l",ylab=expression(log(sigma_gamma)))
par(mfrow=c(3,2),mar=c(4,4,1,1))
acf(mh$log_alpha[-burn.in],xlab=expression(log(alpha)))
acf(mh$delta[-burn.in],xlab=expression(delta))
acf(mh$log_sigma[-burn.in],xlab=expression(log(sigma)))
acf(mh$mu_gamma[-burn.in],xlab=expression(mu_gamma))
acf(mh$log_sigma_gamma[-burn.in],xlab=expression(log(sigma_gamma)))
n.eff <- c(0,0,0,0,0)
autocor <- acf(mh$log_alpha[-(burn.in)],plot=FALSE);t.eff <- 2*sum(autocor[[1]]) - 1;n.eff[1] <- nsteps/t.eff
autocor <- acf(mh$delta[-(burn.in)],plot=FALSE);t.eff <- 2*sum(autocor[[1]]) - 1;n.eff[2] <- nsteps/t.eff
autocor <- acf(mh$log_sigma[-(burn.in)],plot=FALSE);t.eff <- 2*sum(autocor[[1]]) - 1;n.eff[3] <- nsteps/t.eff
autocor <- acf(mh$mu_gamma[-(burn.in)],plot=FALSE);t.eff <- 2*sum(autocor[[1]]) - 1;n.eff[4] <- nsteps/t.eff
autocor <- acf(mh$log_sigma_gamma[-(burn.in)],plot=FALSE);t.eff <- 2*sum(autocor[[1]]) - 1;n.eff[4] <- nsteps/t.eff
n.eff
par(mfrow=c(5,2),mar=c(2,2,1,1))
# For visualization purposes we take a random sample
# of the iterations retained (after discarding burn-in)
samp<-sample((1:nsteps)[-(burn.in)],nsteps/2)
plot(mh$log_alpha[samp],mh$delta[samp],xlab=expression(log(alpha)),ylab=expression(delta),pch=".",cex=0.1)
plot(mh$log_alpha[samp],mh$log_sigma[samp],xlab=expression(log(alpha)),ylab=expression(log(sigma)),pch=".",cex=0.1)
plot(mh$log_alpha[samp],mh$log_sigma_gamma[samp],xlab=expression(log(alpha)),ylab=expression(log(sigma_gamma)),pch=".",cex=0.1)
plot(mh$delta[samp],mh$log_sigma[samp],xlab=expression(delta),ylab=expression(log(sigma)),pch=".",cex=0.1)
plot(mh$delta[samp],mh$log_sigma_gamma[samp],xlab=expression(delta),ylab=expression(log(sigma_gamma)),pch=".",cex=0.1)
plot(mh$log_sigma[samp],mh$log_sigma_gamma[samp],xlab=expression(log(sigma)),ylab=expression(log(sigma_gamma)),pch=".",cex=0.1)
plot(mh$mu_gamma[samp],mh$log_alpha[samp],xlab=expression(mu_gamma),ylab=expression(log(alpha)),pch=".",cex=0.1)
plot(mh$mu_gamma[samp],mh$delta[samp],xlab=expression(mu_gamma),ylab=expression(delta),pch=".",cex=0.1)
plot(mh$mu_gamma[samp],mh$log_sigma[samp],xlab=expression(mu_gamma),ylab=expression(log(sigma)),pch=".",cex=0.1)
plot(mh$mu_gamma[samp],mh$log_sigma_gamma[samp],xlab=expression(mu_gamma),ylab=expression(log(sigma_gamma)),pch=".",cex=0.1)
par(mfrow=c(3,2),mar=c(2,2,1,1))
samp<-sample((1:nsteps)[-(burn.in)],nsteps/2)# For visualization purposes we take a random sample of the iterations retained (after discarding burn-in)
plot(mh$log_alpha[samp],mh$delta[samp],xlab=expression(log(alpha)),ylab=expression(delta),pch=".",cex=0.1)
plot(mh$log_alpha[samp],mh$log_sigma[samp],xlab=expression(log(alpha)),ylab=expression(log(sigma)),pch=".",cex=0.1)
plot(mh$log_alpha[samp],mh$log_sigma_gamma[samp],xlab=expression(log(alpha)),ylab=expression(log(sigma_gamma)),pch=".",cex=0.1)
plot(mh$delta[samp],mh$log_sigma[samp],xlab=expression(delta),ylab=expression(log(sigma)),pch=".",cex=0.1)
plot(mh$delta[samp],mh$log_sigma_gamma[samp],xlab=expression(delta),ylab=expression(log(sigma_gamma)),pch=".",cex=0.1)
plot(mh$log_sigma[samp],mh$log_sigma_gamma[samp],xlab=expression(log(sigma)),ylab=expression(log(sigma_gamma)),pch=".",cex=0.1)
plot(mh$mu_gamma[samp],mh$log_alpha[samp],xlab=expression(mu_gamma),ylab=expression(log(alpha)),pch=".",cex=0.1)
plot(mh$mu_gamma[samp],mh$delta[samp],xlab=expression(mu_gamma),ylab=expression(delta),pch=".",cex=0.1)
plot(mh$mu_gamma[samp],mh$log_sigma[samp],xlab=expression(mu_gamma),ylab=expression(log(sigma)),pch=".",cex=0.1)
plot(mh$mu_gamma[samp],mh$log_sigma_gamma[samp],xlab=expression(mu_gamma),ylab=expression(log(sigma_gamma)),pch=".",cex=0.1)
par(mfrow=c(2,2),mar=c(2,2,1,1))
plot(mh$mu_gamma[samp],mh$log_alpha[samp],xlab=expression(mu_gamma),ylab=expression(log(alpha)),pch=".",cex=0.1)
plot(mh$mu_gamma[samp],mh$delta[samp],xlab=expression(mu_gamma),ylab=expression(delta),pch=".",cex=0.1)
plot(mh$mu_gamma[samp],mh$log_sigma[samp],xlab=expression(mu_gamma),ylab=expression(log(sigma)),pch=".",cex=0.1)
plot(mh$mu_gamma[samp],mh$log_sigma_gamma[samp],xlab=expression(mu_gamma),ylab=expression(log(sigma_gamma)),pch=".",cex=0.1)
par(mfrow=c(3,2),mar=c(4,4,1,1))
samp<-sample((1:nsteps)[-(burn.in)],nsteps/2)# For visualization purposes we take a random sample of the iterations retained (after discarding burn-in)
plot(mh$log_alpha[samp],mh$delta[samp],xlab=expression(log(alpha)),ylab=expression(delta),pch=".",cex=0.1)
plot(mh$log_alpha[samp],mh$log_sigma[samp],xlab=expression(log(alpha)),ylab=expression(log(sigma)),pch=".",cex=0.1)
plot(mh$log_alpha[samp],mh$log_sigma_gamma[samp],xlab=expression(log(alpha)),ylab=expression(log(sigma_gamma)),pch=".",cex=0.1)
plot(mh$delta[samp],mh$log_sigma[samp],xlab=expression(delta),ylab=expression(log(sigma)),pch=".",cex=0.1)
plot(mh$delta[samp],mh$log_sigma_gamma[samp],xlab=expression(delta),ylab=expression(log(sigma_gamma)),pch=".",cex=0.1)
plot(mh$log_sigma[samp],mh$log_sigma_gamma[samp],xlab=expression(log(sigma)),ylab=expression(log(sigma_gamma)),pch=".",cex=0.1)
par(mfrow=c(2,2),mar=c(4,4,1,1))
plot(mh$mu_gamma[samp],mh$log_alpha[samp],xlab=expression(mu_gamma),ylab=expression(log(alpha)),pch=".",cex=0.1)
plot(mh$mu_gamma[samp],mh$delta[samp],xlab=expression(mu_gamma),ylab=expression(delta),pch=".",cex=0.1)
plot(mh$mu_gamma[samp],mh$log_sigma[samp],xlab=expression(mu_gamma),ylab=expression(log(sigma)),pch=".",cex=0.1)
plot(mh$mu_gamma[samp],mh$log_sigma_gamma[samp],xlab=expression(mu_gamma),ylab=expression(log(sigma_gamma)),pch=".",cex=0.1)
show.plot<- (burn.in):nsteps
par(mfrow=c(3,2), mar=c(4,4,1,1))
plot(mh$log_alpha[show.plot],type="l",ylab=expression(log_alpha))
plot(mh$delta[show.plot],type="l",ylab=expression(delta))
plot(mh$log_sigma[show.plot],type="l",ylab=expression(log(sigma)))
plot(mh$mu_gamma[show.plot],type="l",ylab=expression(mu_gamma))
plot(mh$log_sigma_gamma[show.plot],type="l",ylab=expression(log(sigma_gamma)))
par(mfrow=c(3,2),mar=c(4,4,1,1))
acf(mh$log_alpha[-burn.in],xlab=expression(log(alpha)))
acf(mh$delta[-burn.in],xlab=expression(delta))
acf(mh$log_sigma[-burn.in],xlab=expression(log(sigma)))
acf(mh$mu_gamma[-burn.in],xlab=expression(mu_gamma))
acf(mh$log_sigma_gamma[-burn.in],xlab=expression(log(sigma_gamma)))
par(mfrow=c(3,2),mar=c(4,4,1,1))
acf(mh$log_alpha[-burn.in],xlab=expression(log(alpha)))
acf(mh$delta[-burn.in],xlab=expression(delta))
acf(mh$log_sigma[-burn.in],xlab=expression(log(sigma)))
acf(mh$mu_gamma[-burn.in],xlab=expression(mu_gamma))
acf(mh$log_sigma_gamma[-burn.in],xlab=expression(log(sigma_gamma)))
par(mfrow=c(3,2),mar=c(4,4,1,1))
acf(mh$log_alpha[-burn.in],xlab=expression(log(alpha)))
acf(mh$delta[-burn.in],xlab=expression(delta))
acf(mh$log_sigma[-burn.in],xlab=expression(log(sigma)))
acf(mh$mu_gamma[-burn.in],xlab=expression(mu_gamma))
acf(mh$log_sigma_gamma[-burn.in],xlab=expression(log(sigma_gamma)))
par(mfrow=c(3,2),mar=c(4,4,1,1))
samp<-sample((1:nsteps)[-(burn.in)],nsteps/2)# For visualization purposes we take a random sample of the iterations retained (after discarding burn-in)
plot(mh$log_alpha[samp],mh$delta[samp],xlab=expression(log(alpha)),ylab=expression(delta),pch=".",cex=0.1)
plot(mh$log_alpha[samp],mh$log_sigma[samp],xlab=expression(log(alpha)),ylab=expression(log(sigma)),pch=".",cex=0.1)
plot(mh$log_alpha[samp],mh$log_sigma_gamma[samp],xlab=expression(log(alpha)),ylab=expression(log(sigma_gamma)),pch=".",cex=0.1)
plot(mh$delta[samp],mh$log_sigma[samp],xlab=expression(delta),ylab=expression(log(sigma)),pch=".",cex=0.1)
plot(mh$delta[samp],mh$log_sigma_gamma[samp],xlab=expression(delta),ylab=expression(log(sigma_gamma)),pch=".",cex=0.1)
plot(mh$log_sigma[samp],mh$log_sigma_gamma[samp],xlab=expression(log(sigma)),ylab=expression(log(sigma_gamma)),pch=".",cex=0.1)
par(mfrow=c(3,2),mar=c(4,4,1,1))
plot(mh$mu_gamma[samp],mh$log_alpha[samp],xlab=expression(mu_gamma),ylab=expression(log(alpha)),pch=".",cex=0.1)
plot(mh$mu_gamma[samp],mh$delta[samp],xlab=expression(mu_gamma),ylab=expression(delta),pch=".",cex=0.1)
plot(mh$mu_gamma[samp],mh$log_sigma[samp],xlab=expression(mu_gamma),ylab=expression(log(sigma)),pch=".",cex=0.1)
plot(mh$mu_gamma[samp],mh$log_sigma_gamma[samp],xlab=expression(mu_gamma),ylab=expression(log(sigma_gamma)),pch=".",cex=0.1)
par(mfrow=c(3,2),mar=c(4,4,1,1))
samp<-sample((1:nsteps)[-(burn.in)],nsteps/2)# For visualization purposes we take a random sample of the iterations retained (after discarding burn-in)
plot(mh$log_alpha[samp],mh$delta[samp],xlab=expression(log(alpha)),ylab=expression(delta),pch=".",cex=0.1)
plot(mh$log_alpha[samp],mh$log_sigma[samp],xlab=expression(log(alpha)),ylab=expression(log(sigma)),pch=".",cex=0.1)
plot(mh$log_alpha[samp],mh$log_sigma_gamma[samp],xlab=expression(log(alpha)),ylab=expression(log(sigma_gamma)),pch=".",cex=0.1)
plot(mh$delta[samp],mh$log_sigma[samp],xlab=expression(delta),ylab=expression(log(sigma)),pch=".",cex=0.1)
plot(mh$delta[samp],mh$log_sigma_gamma[samp],xlab=expression(delta),ylab=expression(log(sigma_gamma)),pch=".",cex=0.1)
plot(mh$log_sigma[samp],mh$log_sigma_gamma[samp],xlab=expression(log(sigma)),ylab=expression(log(sigma_gamma)),pch=".",cex=0.1)
par(mfrow=c(3,2),mar=c(4,4,1,1))
plot(mh$mu_gamma[samp],mh$log_alpha[samp],xlab=expression(mu_gamma),ylab=expression(log(alpha)),pch=".",cex=0.1)
plot(mh$mu_gamma[samp],mh$delta[samp],xlab=expression(mu_gamma),ylab=expression(delta),pch=".",cex=0.1)
plot(mh$mu_gamma[samp],mh$log_sigma[samp],xlab=expression(mu_gamma),ylab=expression(log(sigma)),pch=".",cex=0.1)
plot(mh$mu_gamma[samp],mh$log_sigma_gamma[samp],xlab=expression(mu_gamma),ylab=expression(log(sigma_gamma)),pch=".",cex=0.1)
